/*
 * This file is generated by jOOQ.
 */
package ru.itis.ibragimovaidar.jooqgenerator.jooq.support.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import ru.imark.itobacco.test.integration.jooq.support.SupportSchema;
import ru.imark.itobacco.test.integration.jooq.support.tables.records.PgStatStatementsRecord;

import javax.annotation.processing.Generated;
import java.math.BigDecimal;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.16"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgStatStatements extends TableImpl<PgStatStatementsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pg_stat_statements</code>
     */
    public static final PgStatStatements PG_STAT_STATEMENTS = new PgStatStatements();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgStatStatementsRecord> getRecordType() {
        return PgStatStatementsRecord.class;
    }

    /**
     * The column <code>public.pg_stat_statements.userid</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> USERID = createField(DSL.name("userid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.dbid</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> DBID = createField(DSL.name("dbid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.queryid</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> QUERYID = createField(DSL.name("queryid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.query</code>.
     */
    public final TableField<PgStatStatementsRecord, String> QUERY = createField(DSL.name("query"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.pg_stat_statements.plans</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> PLANS = createField(DSL.name("plans"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.total_plan_time</code>.
     */
    public final TableField<PgStatStatementsRecord, Double> TOTAL_PLAN_TIME = createField(DSL.name("total_plan_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.pg_stat_statements.min_plan_time</code>.
     */
    public final TableField<PgStatStatementsRecord, Double> MIN_PLAN_TIME = createField(DSL.name("min_plan_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.pg_stat_statements.max_plan_time</code>.
     */
    public final TableField<PgStatStatementsRecord, Double> MAX_PLAN_TIME = createField(DSL.name("max_plan_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.pg_stat_statements.mean_plan_time</code>.
     */
    public final TableField<PgStatStatementsRecord, Double> MEAN_PLAN_TIME = createField(DSL.name("mean_plan_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.pg_stat_statements.stddev_plan_time</code>.
     */
    public final TableField<PgStatStatementsRecord, Double> STDDEV_PLAN_TIME = createField(DSL.name("stddev_plan_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.pg_stat_statements.calls</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> CALLS = createField(DSL.name("calls"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.total_exec_time</code>.
     */
    public final TableField<PgStatStatementsRecord, Double> TOTAL_EXEC_TIME = createField(DSL.name("total_exec_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.pg_stat_statements.min_exec_time</code>.
     */
    public final TableField<PgStatStatementsRecord, Double> MIN_EXEC_TIME = createField(DSL.name("min_exec_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.pg_stat_statements.max_exec_time</code>.
     */
    public final TableField<PgStatStatementsRecord, Double> MAX_EXEC_TIME = createField(DSL.name("max_exec_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.pg_stat_statements.mean_exec_time</code>.
     */
    public final TableField<PgStatStatementsRecord, Double> MEAN_EXEC_TIME = createField(DSL.name("mean_exec_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.pg_stat_statements.stddev_exec_time</code>.
     */
    public final TableField<PgStatStatementsRecord, Double> STDDEV_EXEC_TIME = createField(DSL.name("stddev_exec_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.pg_stat_statements.rows</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> ROWS = createField(DSL.name("rows"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.shared_blks_hit</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> SHARED_BLKS_HIT = createField(DSL.name("shared_blks_hit"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.shared_blks_read</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> SHARED_BLKS_READ = createField(DSL.name("shared_blks_read"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.shared_blks_dirtied</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> SHARED_BLKS_DIRTIED = createField(DSL.name("shared_blks_dirtied"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.shared_blks_written</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> SHARED_BLKS_WRITTEN = createField(DSL.name("shared_blks_written"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.local_blks_hit</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> LOCAL_BLKS_HIT = createField(DSL.name("local_blks_hit"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.local_blks_read</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> LOCAL_BLKS_READ = createField(DSL.name("local_blks_read"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.local_blks_dirtied</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> LOCAL_BLKS_DIRTIED = createField(DSL.name("local_blks_dirtied"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.local_blks_written</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> LOCAL_BLKS_WRITTEN = createField(DSL.name("local_blks_written"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.temp_blks_read</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> TEMP_BLKS_READ = createField(DSL.name("temp_blks_read"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.temp_blks_written</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> TEMP_BLKS_WRITTEN = createField(DSL.name("temp_blks_written"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.blk_read_time</code>.
     */
    public final TableField<PgStatStatementsRecord, Double> BLK_READ_TIME = createField(DSL.name("blk_read_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.pg_stat_statements.blk_write_time</code>.
     */
    public final TableField<PgStatStatementsRecord, Double> BLK_WRITE_TIME = createField(DSL.name("blk_write_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.pg_stat_statements.wal_records</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> WAL_RECORDS = createField(DSL.name("wal_records"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.wal_fpi</code>.
     */
    public final TableField<PgStatStatementsRecord, Long> WAL_FPI = createField(DSL.name("wal_fpi"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pg_stat_statements.wal_bytes</code>.
     */
    public final TableField<PgStatStatementsRecord, BigDecimal> WAL_BYTES = createField(DSL.name("wal_bytes"), SQLDataType.NUMERIC, this, "");

    private PgStatStatements(Name alias, Table<PgStatStatementsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgStatStatements(Name alias, Table<PgStatStatementsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"pg_stat_statements\" as  SELECT pg_stat_statements.userid,\n    pg_stat_statements.dbid,\n    pg_stat_statements.queryid,\n    pg_stat_statements.query,\n    pg_stat_statements.plans,\n    pg_stat_statements.total_plan_time,\n    pg_stat_statements.min_plan_time,\n    pg_stat_statements.max_plan_time,\n    pg_stat_statements.mean_plan_time,\n    pg_stat_statements.stddev_plan_time,\n    pg_stat_statements.calls,\n    pg_stat_statements.total_exec_time,\n    pg_stat_statements.min_exec_time,\n    pg_stat_statements.max_exec_time,\n    pg_stat_statements.mean_exec_time,\n    pg_stat_statements.stddev_exec_time,\n    pg_stat_statements.rows,\n    pg_stat_statements.shared_blks_hit,\n    pg_stat_statements.shared_blks_read,\n    pg_stat_statements.shared_blks_dirtied,\n    pg_stat_statements.shared_blks_written,\n    pg_stat_statements.local_blks_hit,\n    pg_stat_statements.local_blks_read,\n    pg_stat_statements.local_blks_dirtied,\n    pg_stat_statements.local_blks_written,\n    pg_stat_statements.temp_blks_read,\n    pg_stat_statements.temp_blks_written,\n    pg_stat_statements.blk_read_time,\n    pg_stat_statements.blk_write_time,\n    pg_stat_statements.wal_records,\n    pg_stat_statements.wal_fpi,\n    pg_stat_statements.wal_bytes\n   FROM pg_stat_statements(true) pg_stat_statements(userid, dbid, queryid, query, plans, total_plan_time, min_plan_time, max_plan_time, mean_plan_time, stddev_plan_time, calls, total_exec_time, min_exec_time, max_exec_time, mean_exec_time, stddev_exec_time, rows, shared_blks_hit, shared_blks_read, shared_blks_dirtied, shared_blks_written, local_blks_hit, local_blks_read, local_blks_dirtied, local_blks_written, temp_blks_read, temp_blks_written, blk_read_time, blk_write_time, wal_records, wal_fpi, wal_bytes);"));
    }

    /**
     * Create an aliased <code>public.pg_stat_statements</code> table reference
     */
    public PgStatStatements(String alias) {
        this(DSL.name(alias), PG_STAT_STATEMENTS);
    }

    /**
     * Create an aliased <code>public.pg_stat_statements</code> table reference
     */
    public PgStatStatements(Name alias) {
        this(alias, PG_STAT_STATEMENTS);
    }

    /**
     * Create a <code>public.pg_stat_statements</code> table reference
     */
    public PgStatStatements() {
        this(DSL.name("pg_stat_statements"), null);
    }

    public <O extends Record> PgStatStatements(Table<O> child, ForeignKey<O, PgStatStatementsRecord> key) {
        super(child, key, PG_STAT_STATEMENTS);
    }

    @Override
    public Schema getSchema() {
        return SupportSchema.PUBLIC;
    }

    @Override
    public PgStatStatements as(String alias) {
        return new PgStatStatements(DSL.name(alias), this);
    }

    @Override
    public PgStatStatements as(Name alias) {
        return new PgStatStatements(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatStatements rename(String name) {
        return new PgStatStatements(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatStatements rename(Name name) {
        return new PgStatStatements(name, null);
    }
}
